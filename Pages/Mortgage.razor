@page "/mortgage"

<title>Calculate mortgage stuff</title>

@using BlazorApp.Data

<h1>Mortgage all the things</h1>

<p>This is a tool to help visualize your mortgage application.</p>

<div class="mortgage">
    <div class="form-group">
        <div>
            <label for="purchasePrice">Purchase price SEK</label>
            <div class="input">
                <input id="purchasePrice" class="form-control" @onchange="changeValue" @bind="PurchasePrice"
                    @bind:event="oninput" />
            </div>
        </div>
        <div>
            <label for="downPayment">Down payment SEK</label>
            <div class="input">
                <input id="downPayment" class="form-control" @bind="DownPayment" @bind:event="oninput" />
            </div>
        </div>
        <div>
            <label for="interestRate">Interest rate %</label>
            <div class="input">
                <input id="interestRate" class="form-control" @bind="InterestRate" @bind:event="oninput" />
            </div>
        </div>
        <div>
            <label for="totalSalary">Total monthly salary</label>
            <div class="input">
                <input id="totalSalary" class="form-control" @bind="TotalSalary" @bind:event="oninput" />
            </div>
        </div>
    </div>
    <div class="expenses">
        <label>Monthly expenses</label>
        <div>
            <div class="input">
                <input @bind="expenseName" class="form-control" @bind:event="oninput" />
            </div>
            <div class="input">
                <input @bind="expenseCost" class="form-control" @bind:event="oninput" />
            </div>
            <button class="btn btn-primary" @onclick="AddToCollection">Click me</button>

            @if (Expenses != null)
            {
                <table>
                    <tr>
                        <th>Expense</th>
                        <th>Cost</th>
                    </tr>
                    @foreach (var expense in Expenses)
                    {
                        <tr>
                            <td>@expense.Name</td>
                            <td>@expense.Cost.ToString("C0")</td>
                        </tr>
                    }
                    <tr>
                        <td>
                            <b>Total</b>
                        </td>
                        <td>
                            <b>@Expenses.Select(e => e.Cost).Sum().ToString("C0")</b>
                        </td>
                    </tr>
                </table>
            }
        </div>
    </div>
    <div class="summary">
        <div>
            <label>Purchase price: </label>
            <b>@PurchasePrice</b>
        </div>
        <div>
            <label>Down payment: </label>
            <b>@DownPayment</b>
        </div>
        <div>
            <label>Interest rate: </label>
            <b>@InterestRate%</b>
        </div>
        <div>
            <label>Loan: </label>
            <b>@Loan.ToString("C0")</b>
        </div>
        <div>
            <label>Total salary to compare with: </label>
            <b>@TotalSalaryToCompareWith.ToString("C0")</b>
        </div>
        <div>
            <label>Monthly installment rate</label>
            <b>@InstallmentRate%</b>
        </div>
        <div>
            <label>Monthly loan costs</label>
            <b>@MonthlyLoanCost.ToString("C")</b>
        </div>
    </div>
    <div>
        <label>@counter</label>>>
    </div>
</div>

@code {
    private int purchasePrice = 0;
    private string PurchasePrice
    {
        get => purchasePrice.ToString("N0");
        set
        {
            if (int.TryParse(value.RemoveWhitespace(), out var number))
            {
                purchasePrice = number;
            }
        }
    }

    private int downPayment = 0;
    private string DownPayment
    {
        get => downPayment.ToString("N0");
        set
        {
            if (int.TryParse(value.RemoveWhitespace(), out var number))
            {
                downPayment = number;
            }
        }
    }

    private int totalSalary = 0;
    private string TotalSalary
    {
        get => totalSalary.ToString("N0");
        set
        {
            if (int.TryParse(value.RemoveWhitespace(), out var number))
            {
                totalSalary = number;
            }
        }
    }

    private double InterestRate { get; set; }
    private List<Expense> Expenses { get; set; } = new();

    private string expenseName { get; set; } = string.Empty;
    private int expenseCost { get; set; }

    private double TotalSalaryToCompareWith { get => (totalSalary * 12) * 4.5; }
    private int Loan { get => purchasePrice - downPayment; }

    private int counter;
    private void changeValue()
    {
        for (int i = 5; i > -1; i--)
        {
            
            Thread.Sleep(1000);
            counter = i;
            Console.WriteLine(counter);
        }
    }

    private void AddToCollection()
    {
        if (Expenses == null)
        {
            Expenses = new List<Expense>();
        }

        Expenses.Add(new Expense
        {
            Name = expenseName,
            Cost = expenseCost
        });

        expenseName = "";
        expenseCost = 0;
    }

    private double MonthlyLoanCost
    {
        get
        {
            return
            (Loan * (InterestRate / 100) / 12)
            + ((double)Loan * ((double)InstallmentRate / 100) / 12);
        }
    }

    private int InstallmentRate
    {
        get
        {
            if (Loan == 0 || purchasePrice == 0)
            {
                return 0;
            }

            var loanPercentageOfTotalCost = (double)Loan / (double)purchasePrice;
            var percentage = 0;

            if (Loan > downPayment)
            {
                if (loanPercentageOfTotalCost > 0.5 && loanPercentageOfTotalCost <= 0.7)
                {
                    percentage++;
                }

                if (loanPercentageOfTotalCost > 0.7)
                {
                    percentage = percentage + 2;
                }
            }
            if (Loan > TotalSalaryToCompareWith)
            {
                percentage++;
            }

            return percentage;
        }
    }

    private class Expense
    {
        internal string Name { get; set; } = string.Empty;
        internal int Cost { get; set; }
    }
}