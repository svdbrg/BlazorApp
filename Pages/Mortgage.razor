@page "/mortgage"

<title>Calculate mortgage stuff</title>

@using BlazorApp.Data
@using System.Timers
@using System.Text.Json

<h1>Mortgage all the things</h1>

<p>This is a tool to help visualize your mortgage application.</p>

<div class="mortgage">
    <div>
        <RadzenProgressBar @bind-Value="@counter" ShowValue="false" Style="margin-bottom: 20px" />
        <label>@saveCounterMessage</label>
    </div>
    <h2>Loan information</h2>
    <div class="form-group">
        <div>
            <label for="purchasePrice">Purchase price SEK</label>
            <div class="input">
                <input id="purchasePrice" class="form-control" @onchange="changeValue" @bind="mortgage.PurchasePriceString" @bind:event="oninput" />
            </div>
        </div>
        <div>
            <label for="downPayment">Down payment SEK</label>
            <div class="input">
                <input id="downPayment" class="form-control" @bind="mortgage.DownPaymentString" @bind:event="oninput" @onchange="changeValue" />
            </div>
        </div>
        <div>
            <label for="interestRate">Interest rate %</label>
            <div class="input">
                <input id="interestRate" class="form-control" @bind="mortgage.InterestRate" @bind:event="oninput" @onchange="changeValue" />
            </div>
        </div>
        <div>
            <label for="totalSalary">Total monthly salary</label>
            <div class="input">
                <input id="totalSalary" class="form-control" @bind="mortgage.TotalSalaryString" @bind:event="oninput" @onchange="changeValue" />
            </div>
        </div>
        <div class="summary">
            <table>
                <tr>
                    <td>Purchase price: </td>
                    <td>@mortgage.PurchasePrice.ToString("C0")</td>
                </tr>
                <tr>
                    <td>Down payment: </td>
                    <td>@mortgage.DownPayment.ToString("C0")</td>
                </tr>
                <tr>
                    <td>Interest rate: </td>
                    <td>@mortgage.InterestRate%</td>
                </tr>
                <tr>
                    <td>Loan: </td>
                    <td>@mortgage.Loan.ToString("C0")</td>
                </tr>
                <tr>
                    <td>Total salary to compare with: </td>
                    <td>@mortgage.TotalSalaryToCompareWith.ToString("C0")</td>
                </tr>
                <tr>
                    <td>Monthly installment rate</td>
                    <td>@mortgage.InstallmentRate%</td>
                </tr>
                <tr>
                    <td>Monthly loan costs</td>
                    <td>@mortgage.MonthlyLoanCost.ToString("C")</td>
                </tr>
            </table>
        </div>
    </div>
    <div class="expenses">
        <h2>Monthly expenses</h2>
        <div>
            <div class="input">
                <input @bind="expenseName" @onkeydown="@Enter" class="form-control" @bind:event="oninput" />
            </div>
            <div class="input">
                <input @bind="expenseCost" @onkeydown="@Enter" class="form-control" @bind:event="oninput" />
            </div>

            @if (mortgage.Expenses != null)
            {
                <table class="expenses">
                    <tr>
                        <th>Expense</th>
                        <th class="right">Cost</th>
                        <th class="center"></th>
                    </tr>
                    @foreach (var expense in mortgage.Expenses.OrderBy(e => e.Cost))
                    {
                        <tr>
                            <td>@expense.Name</td>
                            <td class="right">@expense.Cost.ToString("C0")</td>
                            <td class="center">
                                <a class="text-decoration-none" @onclick="@(e => RemoveExpense(expense))">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                class="bi bi-trash" viewBox="0 0 16 16">
                                        <path
                                    d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z">
                                        </path>
                                        <path fill-rule="evenodd"
                                    d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z">
                                        </path>
                                    </svg>
                                </a>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>
                            Loan cost
                        </td>
                        <td class="right">
                            @mortgage.MonthlyLoanCost.ToString("C0")
                        </td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>
                            <b>Total</b>
                        </td>
                        <td class="right">
                            <b>@((mortgage.Expenses.Select(e => e.Cost).Sum() +
                            mortgage.MonthlyLoanCost).ToString("C0"))</b>
                        </td>
                    </tr>
                </table>
            }
        </div>
    </div>
</div>

@code {
    private MortgageItem mortgage = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var file = new DirectoryInfo(directory).GetFiles().OrderByDescending(o => o.LastWriteTime).FirstOrDefault();
            if (file != null)
            {
                var json = File.ReadAllText($"{directory}/{file.Name}");

                if (!string.IsNullOrWhiteSpace(json) && mortgage != null)
                {
                    mortgage = JsonSerializer.Deserialize<MortgageItem>(json) ?? new();

                    InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private string expenseName { get; set; } = string.Empty;
    private int expenseCost { get; set; }

    private static Timer aTimer = new Timer();
    private double counter = 100;
    private string saveCounterMessage = "";

    private string directory = "save";
    private string fileName = $"mortgage-{DateTime.Now.ToString("yyyy-MM-dd")}.json";
    private void RemoveExpense(Expense expense)
    {
        mortgage.Expenses.Remove(expense);
        changeValue();
    }

    private void changeValue()
    {
        counter = 100;
        aTimer.Stop();
        aTimer = new Timer(50);
        aTimer.Elapsed += CountDownTimer;
        aTimer.Enabled = true;
    }

    private void CountDownTimer(Object? source, ElapsedEventArgs e)
    {
        if (counter > 0)
        {
            counter -= 1;
        }
        else
        {
            aTimer.Enabled = false;
            saveCounterMessage = "Saved to file!";
            counter = 100;
            SaveChangesToJson();
        }

        InvokeAsync(StateHasChanged);
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            AddToExpenses();
        }
    }

    private void AddToExpenses()
    {
        if (string.IsNullOrWhiteSpace(expenseName) || expenseCost < 1)
        {
            return;
        }

        mortgage.Expenses.Add(new Expense
        {
            Name = expenseName,
            Cost = expenseCost
        });

        changeValue();

        expenseName = "";
        expenseCost = 0;
    }

    private void SaveChangesToJson()
    {
        var data = mortgage.ToJson();

        if (!Directory.Exists(directory))
        {
            Directory.CreateDirectory(directory);
        }

        File.WriteAllText($"{directory}/{fileName}", data);
    }
}