@using Data
@using Services
@inject IJSRuntime _js

@foreach (var day in days)
{
    <MudPaper Class="pa-4 mb-4">
        <MudText Typo="Typo.subtitle1">@day.Date</MudText>

        @foreach (var fixture in day.Fixtures)
        {
            <div class="d-flex justify-space-between py-2 px-1 @HelperMethods.GetCssClassForCurrentStatus(fixture.Status, fixture.Phase) fixture"
        @onmouseout="@(() => removeCurrentlyPlayingDelegate!(fixture.HomeTeamShortName, fixture.AwayTeamShortName))"
        @onmouseover="@(() => setCurrentlyPlayingDelegate!(fixture.HomeTeamShortName, fixture.AwayTeamShortName))">
                <div id="f-@fixture.HomeTeamShortName" class="my-auto" style="width: 40%;">
                    <MudText Align="Align.Right" Typo="Typo.subtitle2">
                        @fixture.HomeTeam
                    </MudText>
                </div>
                <div class="my-auto">
                    <MudText Align="Align.Center" Typo="Typo.caption">
                        @(getTimeOrStatus(fixture))
                    </MudText>
                </div>
                <div id="f-@fixture.AwayTeamShortName" class="my-auto" style="width: 40%;">
                    <MudText Align="Align.Left" Typo="Typo.subtitle2">
                        @fixture.AwayTeam
                    </MudText>
                </div>
            </div>
        }
    </MudPaper>
}

@code {
    [Parameter]
    public List<Day> days { get; set; } = new();

    [Parameter] public Action<string, string>? setCurrentlyPlayingDelegate { get; set; }

    [Parameter] public Action<string, string>? removeCurrentlyPlayingDelegate { get; set; }

    private string getTimeOrStatus(Fixture fixture)
    {
        if (fixture.Phase == "P")
        {
            return "N/A";
        }

        return fixture.Status == "U" ? fixture.DateAndTime.ToShortTimeString() : fixture.Result;
    }

    public async void setActiveTeam(string team)
    {
        await _js.InvokeVoidAsync($"Fixture.setClass", team);
    }

    public async void removeActiveTeam(string team)
    {
        await _js.InvokeVoidAsync($"Fixture.removeClass", team);
    }
}