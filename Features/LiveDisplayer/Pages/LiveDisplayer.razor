@page "/livedisplayer"
@using Data
@using BlazorApp.Features.LiveDisplayer.Services

@inject IFootballDataService _dataFetcher

<PageTitle>Live Display</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}

<div id="table">
    <table>
        <thead>
            <tr>
                <th>POS</th>
                <th>Team</th>
                <th>PL</th>
                <th>GD</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in table)
            {
                <tr>
                    <td>@team.Position</td>
                    <td>@team.Name</td>
                    <td>@team.Played</td>
                    <td>@team.GoalDifference</td>
                    <td>@team.Points</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div id="fixtures">
    @foreach (var day in days)
    {
        <div class="day-wrapper">
            <div class="day">@day.Date</div>
            @foreach (var fixture in day.Fixtures)
            {
                <div class="fixture">
                    <div class="home">@fixture.HomeTeam</div>
                    <div class="result">@(fixture.Status == "U" ? fixture.DateAndTime.ToShortTimeString() : fixture.Result)
                    </div>
                    <div class="away">@fixture.AwayTeam</div>
                </div>
            }

        </div>
    }
</div>

@code {
    private IEnumerable<Team> table = new List<Team>();
    private List<Day> days = new();
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            table = await _dataFetcher.GetTableAsync();

            await foreach (var day in _dataFetcher.GetDaysAndFixturesAsync())
            {
                days.Add(day);
                await InvokeAsync(StateHasChanged);
            }

            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}