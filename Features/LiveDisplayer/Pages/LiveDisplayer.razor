@page "/livedisplayer"
@using BlazorApp.Features.LiveDisplayer.Components
@using Data
@using BlazorApp.Features.LiveDisplayer.Services
@using BlazorApp.Models
@using System.Timers

@inject IFootballDataService _dataFetcher
@inject AppState appState
@implements IDisposable

<PageTitle>Live Display</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}


<div id="table">
    <Table footballTable="table" />
</div>
<div id="fixtures">
    <Fixtures days="days" />
</div>

@code {
    private IEnumerable<Team> table = new List<Team>();
    private List<Day> days = new();
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            appState.ToggleAutoRefresh(false);
            await GetData();
        }
    }

    private async Task GetData()
    {
        table = await _dataFetcher.GetTableAsync();
        days.Clear();

        await foreach (var day in _dataFetcher.GetDaysAndFixturesAsync())
        {
            days.Add(day);
            await InvokeAsync(StateHasChanged);
        }

        table = _dataFetcher.EnrichTableWithStatus(table, days);

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }



    protected async override void OnAfterRender(bool firstRender)
    {


        base.OnAfterRender(firstRender);
    }

    protected async override void OnInitialized()
    {
        appState.OnChange += MyEventHandler;
    }

    public void Dispose()
    {
        appState.OnChange -= MyEventHandler;
    }

    private async void MyEventHandler()
    {
        StateHasChanged();

        while (appState.AutoRefresh)
        {

            await Task.Delay(10000);
            await GetData();
            Console.WriteLine("Data was refreshed");
        }

    }
}