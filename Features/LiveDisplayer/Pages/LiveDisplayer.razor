@page "/livedisplayer"

@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.LiveDisplayer.Components
@using Data
@using BlazorApp.Features.LiveDisplayer.Services

@inject IFootballDataService _dataFetcher
@inject AppState appState

@implements IDisposable

<PageTitle>Live Display</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}

<div id="table">
    <Table 
        footballTable="table" 
        @ref="plTable" 
        />
</div>
<div id="fixtures">
    <Fixtures days="days" 
        setCurrentlyPlayingDelegate="@((h, a) => plTable?.setCurrentlyPlaying(h,a))"
        removeCurrentlyPlayingDelegate="@((h, a) => plTable?.removeCurrentlyPlaying(h,a))"
         />
</div>

@code {
    private IEnumerable<Team> table = new List<Team>();
    private List<Day> days = new();
    private bool isLoading = true;
    protected Table plTable = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            appState.ToggleAutoRefresh(false);
            await GetData();
        }
    }

    private async Task GetData()
    {
        table = await _dataFetcher.GetTableAsync();
        days.Clear();

        await foreach (var day in _dataFetcher.GetDaysAndFixturesAsync())
        {
            days.Add(day);
            await InvokeAsync(StateHasChanged);
        }

        table = _dataFetcher.EnrichTableWithStatus(table, days);

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        StateHasChanged();

        while (appState.AutoRefresh)
        {

            await Task.Delay(10000);
            await GetData();
        }
    }
}