@page "/livedisplayer"

@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.LiveDisplayer.Components
@using Data
@using BlazorApp.Features.LiveDisplayer.Services

@inject IFootballDataService _dataFetcher
@inject AppState _appState

@implements IDisposable

<PageTitle>Live Display</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}

<div id="table">
    <Table footballTable="table" @ref="plTable" setCurrentlyPlayingDelegate="@((t) => fixtures?.setActiveTeam(t))"
        removeCurrentlyPlayingDelegate="@((t) => fixtures?.removeActiveTeam(t))" />
</div>
<div id="fixtures">
    <Fixtures days="days" @ref="fixtures" setCurrentlyPlayingDelegate="@((h, a) => plTable?.setCurrentlyPlaying(h,a))"
        removeCurrentlyPlayingDelegate="@((h, a) => plTable?.removeCurrentlyPlaying(h,a))" />
</div>

@code {
    private IEnumerable<Team> table = new List<Team>();
    private List<Day> days = new();
    private bool isLoading = true;
    protected Table plTable = new();
    protected Fixtures fixtures = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetData();
        }
    }

    private async Task GetData()
    {
        table = await _dataFetcher.GetTableAsync();
        days.Clear();
        Day dayWithPostponedGames = new();

        await foreach (var day in _dataFetcher.GetDaysAndFixturesAsync())
        {
            if (string.IsNullOrEmpty(day.Date))
            {
                dayWithPostponedGames = day;
                continue;
            }

            days.Add(day);
            await InvokeAsync(StateHasChanged);
        }

        if (dayWithPostponedGames != default)
        {
            dayWithPostponedGames.Date = "Postponed";
            days.Add(dayWithPostponedGames);
        }

        table = _dataFetcher.EnrichTableWithStatus(table, days);

        isLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        _appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        StateHasChanged();

        while (_appState.AutoRefresh)
        {
            await Task.Delay(10000);
            await GetData();
        }
    }
}