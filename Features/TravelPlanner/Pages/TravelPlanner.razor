@page "/travelplanner"

@using BlazorApp.Features.TravelPlanner.Services.Abstractions
@using Models
@using BlazorApp.Features.Shared.Models

@inject ITravelPlanner _travelPlanner
@inject AppState _appState
@inject LoadingState _loadingState

@implements IDisposable

<PageTitle>Travel Planner</PageTitle>

<MudGrid Spacing="3" Justify="Justify.Center">
    @foreach (var item in trips)
    {
        <MudItem id="paper-wrapper" Class="paper-wrapper" xs="12" sm="6" md="6" lg="4">
            <MudPaper Height="140px" Width="100%" Class="paper pa-4">
                <div>
                    <MudText Typo="Typo.h2">@((int)(item.Legs.First().Origin.Time.Subtract(DateTime.Now).Minutes))</MudText>
                    <MudText Typo="Typo.caption">
                        @getLayoverStops(item)<br />
                        @(string.Join(", ", item.Legs.Where(l => !string.IsNullOrEmpty(l.Line)).Select(l => l.Line)))
                    </MudText>
                </div>
                <div>
                    <div>
                        <MudText Typo="Typo.caption">
                            @item.Legs.First().Origin.Time.ToShortTimeString()<br />
                            @item.Legs.First().Origin.Name
                        </MudText>
                    </div>
                    <div>
                        <MudIcon Icon="@Icons.Filled.KeyboardArrowDown" Title="Favorite" /><br />
                    </div>
                    <div>
                        <MudText Typo="Typo.caption">
                            @item.Legs.Last().Destination.Time.ToShortTimeString()<br />
                            @item.Legs.Last().Destination.Name
                        </MudText>
                    </div>
                </div>

            </MudPaper>
        </MudItem>
    }
</MudGrid>

<div class="change-icon">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Filled.ChangeCircle" @onclick="changeDirection" />
</div>
@code {
    private IEnumerable<Trip> trips = new List<Trip>();
    private List<NearbyStopLocation> nearbyStopLocations = new List<NearbyStopLocation>();
    private NearbyStopLocation homeLocation = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await setTravelPlan();
        }
    }

    private async void changeDirection()
    {
        var homeTemp = _appState.HomeStation;
        _appState.SetHomeStation(_appState.DestinationStation);
        _appState.SetDestination(homeTemp);

        await setTravelPlan();
    }

    private string getLayoverStops(Trip trip)
    {
        if (trip.Legs.Count() == 1)
        {
            return string.Empty;
        }

        var stops = string.Join(", ", trip.Legs.Skip(1).Where(t => !string.IsNullOrWhiteSpace(t.Line)).Select(t =>
        t.Origin.Name));

        return $"Via {stops}";
    }

    private async Task setTravelPlan()
    {
        _loadingState.ToggleLoading(true);

        trips = await _travelPlanner.GetTravelPlan(_appState.HomeStation.MainMastExtId,
        _appState.DestinationStation.MainMastExtId);
        await InvokeAsync(StateHasChanged);

        _loadingState.ToggleLoading(false);
    }

    protected override void OnInitialized()
    {
        _appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        await setTravelPlan();
        await InvokeAsync(StateHasChanged);
    }
}