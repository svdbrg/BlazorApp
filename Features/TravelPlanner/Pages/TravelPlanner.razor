@page "/travelplanner"

@using BlazorApp.Features.TravelPlanner.Services.Abstractions
@using Models

@inject ITravelPlanner _travelPlanner

<PageTitle>Travel Planner</PageTitle>

@foreach (var item in trips.Where(t => t.Legs.First().Origin.Time < DateTime.Now.AddHours(1)))
{
    <div class="trip">
        <div class="minutes">@getFriendlyTimeSpanAsString(item.Legs.First().Origin.Time, DateTime.Now)</div>
        <div class="meta">
            <span>minutes</span>
            <div class="origin">
                @item.Legs.First().Origin.Name
            </div>
            <div class="destination">
                @item.Legs.Last().Destination.Name
            </div>
        </div>
    </div>
}

@* <ul id="stations">
    @foreach (var item in nearbyStops.stopLocationOrCoordLocation)
    {
    <li class="@((item.StopLocation.mainMastExtId == selectedStationOfOrigin) ? "selected" : "")"
    @onclick="@(() => changeOrigin(item.StopLocation.mainMastExtId))">@item.StopLocation.name
    (@item.StopLocation.dist m)</li>
    }
    </ul> *@

@code {
    private IEnumerable<Trip> trips = new List<Trip>();
    private NearbyStopsRoot nearbyStops = new();
    private string selectedStationOfOrigin = "4014";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await setTravelPlan();
            await setNearbyStops();
        }
    }

    private async void changeOrigin(string newOrigin)
    {
        selectedStationOfOrigin = newOrigin;
        await setTravelPlan();
    }

    private string getFriendlyString(TripDto trip)
    {
        var departureTime = extractDepartureTime(trip);
        var destinationTime = extractDestinationTime(trip);

        @* return $@"{trip.LegList.Leg.First().Product.name} is leaving
            {trip.LegList.Leg.First().Origin.name} in
            {getFriendlyTimedivAsString(departureTime, DateTime.Now)}. The travel time to
            {trip.LegList.Leg.Last().Destination.name} is
            {getFriendlyTimedivAsString(destinationTime, departureTime)}. By then, the time is
            {destinationTime.ToShortTimeString()}"; *@

        return "";
    }

    private DateTime extractDepartureTime(TripDto trip)
    {
        if (!string.IsNullOrWhiteSpace(trip.LegList.Leg.First().Origin.rtDate) &&
        !string.IsNullOrWhiteSpace(trip.LegList.Leg.First().Origin.rtTime))
        {
            return DateTime.Parse($"{trip.LegList.Leg.First().Origin.date} {trip.LegList.Leg.First().Origin.time}");

        }

        return DateTime.Now;
    }

    private DateTime extractDestinationTime(TripDto trip)
    {
        return DateTime.Parse($"{trip.LegList.Leg.Last().Destination.date} {trip.LegList.Leg.Last().Destination.time}");
    }

    private string getFriendlyTimeSpanAsString(DateTime start, DateTime end)
    {
        var minutes = start.Subtract(end);
        if (minutes.TotalMinutes > 60)
        {
            return $"{(int)minutes.TotalHours}:{minutes.Minutes}";
        }

        return $"{minutes.Minutes}";
    }

    private async Task setNearbyStops()
    {
        nearbyStops = await _travelPlanner.GetNearbyStops();
        await InvokeAsync(StateHasChanged);
    }

    private async Task setTravelPlan()
    {
        trips = await _travelPlanner.GetTravelPlan(selectedStationOfOrigin);
        await InvokeAsync(StateHasChanged);
    }
}