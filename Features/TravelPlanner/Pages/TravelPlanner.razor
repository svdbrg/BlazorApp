@page "/travelplanner"

@using BlazorApp.Features.TravelPlanner.Services.Abstractions
@using Models
@using BlazorApp.Features.Shared.Models

@inject ITravelPlannerDataClient _travelPlanner
@inject AppState _appState
@inject LoadingState _loadingState

@implements IDisposable

<PageTitle>Travel Planner</PageTitle>
<div class="change-icon">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Filled.ChangeCircle" @onclick="changeDirection" />
</div>

@foreach (var item in trips)
{
    <MudPaper Class="pa-4 ma-2 mud-theme-primary" Elevation="3">
        <MudGrid>
            <MudItem xs="6">
                <div class="d-flex flex-column">
                    <div class="my-2">
                        <MudText Typo="Typo.h2">
                            @((int)(item.Legs.First().Origin.Time.Subtract(DateTime.Now).Minutes))
                            <MudText Typo="Typo.caption">minutes</MudText>
                        </MudText>
                    </div>
                    <div class="my-2">
                        <MudText Typo="Typo.caption">
                            @(string.Join(", ", item.Legs.Where(l => !string.IsNullOrEmpty(l.Line)).Select(l => l.Line)))
                        </MudText>
                        <MudText Typo="Typo.caption">
                            @getLayoverStops(item)
                        </MudText>
                    </div>
                </div>
            </MudItem>
            <MudItem xs="6">
                <div class="d-flex flex-column">
                    <div class="my-2" style="text-align: right;">
                        <MudText Typo="Typo.button">
                            @item.Legs.First().Origin.Time.ToShortTimeString()
                        </MudText>
                        <br />
                        <MudText Typo="Typo.caption">
                            @item.Legs.First().Origin.Name
                        </MudText>
                    </div>
                    <div class="my-2" style="text-align: right;">
                        <MudText Typo="Typo.button">
                            @item.Legs.Last().Destination.Time.ToShortTimeString()
                        </MudText>
                        <br />
                        <MudText Typo="Typo.caption">
                            @item.Legs.Last().Destination.Name
                        </MudText>
                    </div>
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
@code {
    private IEnumerable<Trip> trips = new List<Trip>();
    private List<NearbyStopLocation> nearbyStopLocations = new List<NearbyStopLocation>();
    private NearbyStopLocation homeLocation = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await setTravelPlan();
        }
    }

    private async void changeDirection()
    {
        var homeTemp = _appState.HomeStation;
        _appState.SetHomeStation(_appState.DestinationStation);
        _appState.SetDestination(homeTemp);

        await setTravelPlan();
    }

    private string getLayoverStops(Trip trip)
    {
        if (trip.Legs.Count() == 1)
        {
            return string.Empty;
        }

        var stops = string.Join(", ", trip.Legs.Skip(1).Where(t => !string.IsNullOrWhiteSpace(t.Line)).Select(t =>
        t.Origin.Name));

        return $"via {stops}";
    }

    private async Task setTravelPlan()
    {
        _loadingState.ToggleLoading(true);

        trips = await _travelPlanner.GetTravelPlan(_appState.HomeStation.MainMastExtId,
        _appState.DestinationStation.MainMastExtId);
        await InvokeAsync(StateHasChanged);

        _loadingState.ToggleLoading(false);
    }

    protected override void OnInitialized()
    {
        _appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        await setTravelPlan();
        await InvokeAsync(StateHasChanged);
    }
}