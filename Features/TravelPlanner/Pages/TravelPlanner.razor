@page "/travelplanner"

@using BlazorApp.Features.TravelPlanner.Services.Abstractions
@using Models
@using BlazorApp.Features.Shared.Models

@inject ITravelPlanner _travelPlanner
@inject AppState _appState
@inject LoadingState _loadingState

@implements IDisposable

<PageTitle>Travel Planner</PageTitle>

<div class="switch-container">
    <span @onclick="changeDirection"><svg width="24px" height="24px" viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg">
            <path
                d="M7.72 21.78a.75.75 0 001.06-1.06L5.56 17.5h14.69a.75.75 0 000-1.5H5.56l3.22-3.22a.75.75 0 10-1.06-1.06l-4.5 4.5a.75.75 0 000 1.06l4.5 4.5zm8.56-9.5a.75.75 0 11-1.06-1.06L18.44 8H3.75a.75.75 0 010-1.5h14.69l-3.22-3.22a.75.75 0 011.06-1.06l4.5 4.5a.75.75 0 010 1.06l-4.5 4.5z" />
        </svg></span>
</div>

<div id="trips">
    @foreach (var item in trips)
    {
        <div class="trip">
            <div class="prefix">@getLayoverStops(item)</div>
            <div class="minutes">@((int)(item.Legs.First().Origin.Time.Subtract(DateTime.Now).Minutes))</div>
            <div class="meta">
                <div class="line">@(string.Join(", ", item.Legs.Where(l => !string.IsNullOrEmpty(l.Line)).Select(l =>
                l.Line)))
                </div>
                <div class="origin">
                    @item.Legs.First().Origin.Time.ToShortTimeString()<br />
                    @item.Legs.First().Origin.Name
                </div>
                <div class="destination">
                    @item.Legs.Last().Destination.Time.ToShortTimeString()<br />
                    @item.Legs.Last().Destination.Name
                </div>
            </div>
        </div>
    }
</div>


@code {
    private IEnumerable<Trip> trips = new List<Trip>();
    private List<NearbyStopLocation> nearbyStopLocations = new List<NearbyStopLocation>();
    private NearbyStopLocation homeLocation = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await setTravelPlan();
        }
    }

    private async void changeDirection()
    {
        var homeTemp = _appState.HomeStation;
        _appState.SetHomeStation(_appState.DestinationStation);
        _appState.SetDestination(homeTemp);

        await setTravelPlan();
    }

    private string getLayoverStops(Trip trip)
    {
        if (trip.Legs.Count() == 1)
        {
            return string.Empty;
        }

        var stops = string.Join(", ", trip.Legs.Skip(1).Where(t => !string.IsNullOrWhiteSpace(t.Line)).Select(t =>
        t.Origin.Name));

        return $"Via {stops}";
    }

    private async Task setTravelPlan()
    {
        _loadingState.ToggleLoading(true);
        
        trips = await _travelPlanner.GetTravelPlan(_appState.HomeStation.MainMastExtId, _appState.DestinationStation.MainMastExtId);
        await InvokeAsync(StateHasChanged);

        _loadingState.ToggleLoading(false);
    }

    protected override void OnInitialized()
    {
        _appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        await setTravelPlan();
        await InvokeAsync(StateHasChanged);
    }
}