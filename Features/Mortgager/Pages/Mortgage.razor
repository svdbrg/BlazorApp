@page "/mortgage"

@using BlazorApp.Features.Mortgager.Components
@using BlazorApp.Features.Mortgager.Data
@using BlazorApp.Features.Mortgager.Services.Abstractions
@using BlazorApp.Features.Mortgager.Services
@using BlazorApp.Features.Shared.Services.Abstractions;

@inject IDataService _dataService
@inject ILogger<GcmDataService> _logger
@inject ILocalStorage _localStorage
@inject NavigationManager _navigationManager

<PageTitle>Calculate your mortgage costs</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}

<h1>Mortgage all the things</h1>

<p>This is a tool to help visualize your mortgage application and the costs that follow by owning a home.</p>
<div class="message @GetClassName()">
    <b>@saveCounterMessage</b>
</div>
<div class="mortgage">
    <div class="form-group">
        <h2>Loan information</h2>
        <LoanInformationInput canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
        <LoanInformationSummary mortgage="mortgage" />
    </div>
    <Expenses canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
    <div id="reset-documentsuffix">
        <label @onclick="clickChange">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear"
                viewBox="0 0 16 16">
                <path
                    d="M8 4.754a3.246 3.246 0 1 0 0 6.492 3.246 3.246 0 0 0 0-6.492zM5.754 8a2.246 2.246 0 1 1 4.492 0 2.246 2.246 0 0 1-4.492 0z" />
                <path
                    d="M9.796 1.343c-.527-1.79-3.065-1.79-3.592 0l-.094.319a.873.873 0 0 1-1.255.52l-.292-.16c-1.64-.892-3.433.902-2.54 2.541l.159.292a.873.873 0 0 1-.52 1.255l-.319.094c-1.79.527-1.79 3.065 0 3.592l.319.094a.873.873 0 0 1 .52 1.255l-.16.292c-.892 1.64.901 3.434 2.541 2.54l.292-.159a.873.873 0 0 1 1.255.52l.094.319c.527 1.79 3.065 1.79 3.592 0l.094-.319a.873.873 0 0 1 1.255-.52l.292.16c1.64.893 3.434-.902 2.54-2.541l-.159-.292a.873.873 0 0 1 .52-1.255l.319-.094c1.79-.527 1.79-3.065 0-3.592l-.319-.094a.873.873 0 0 1-.52-1.255l.16-.292c.893-1.64-.902-3.433-2.541-2.54l-.292.159a.873.873 0 0 1-1.255-.52l-.094-.319zm-2.633.283c.246-.835 1.428-.835 1.674 0l.094.319a1.873 1.873 0 0 0 2.693 1.115l.291-.16c.764-.415 1.6.42 1.184 1.185l-.159.292a1.873 1.873 0 0 0 1.116 2.692l.318.094c.835.246.835 1.428 0 1.674l-.319.094a1.873 1.873 0 0 0-1.115 2.693l.16.291c.415.764-.42 1.6-1.185 1.184l-.291-.159a1.873 1.873 0 0 0-2.693 1.116l-.094.318c-.246.835-1.428.835-1.674 0l-.094-.319a1.873 1.873 0 0 0-2.692-1.115l-.292.16c-.764.415-1.6-.42-1.184-1.185l.159-.291A1.873 1.873 0 0 0 1.945 8.93l-.319-.094c-.835-.246-.835-1.428 0-1.674l.319-.094A1.873 1.873 0 0 0 3.06 4.377l-.16-.292c-.415-.764.42-1.6 1.185-1.184l.292.159a1.873 1.873 0 0 0 2.692-1.115l.094-.319z" />
            </svg>
        </label>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService? Modal { get; set; }
    private MortgageItem mortgage = new();
    private bool isLoading = false;
    private bool canEdit = true;
    private string saveCounterMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await LoadData();
        }
    }

    private async void clickChange()
    {
        mortgage = new();
        await _localStorage.RemoveAsync("documentSuffix");
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            await SetDocumentSuffixInLocalStorage();

            mortgage = await _dataService.GetSavedDataAsync() ?? new();
        }
        catch (System.Exception ex)
        {
            _logger.LogError("Failed to fetch data", ex);
            canEdit = false;
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetDocumentSuffixInLocalStorage()
    {
        var documentSuffix = await _localStorage.GetStringAsync("documentSuffix");

        if (string.IsNullOrWhiteSpace(documentSuffix))
        {
            var mortgageModal = Modal?.Show<MortgagePicker>("Select mortgage", new ModalOptions
            {
                DisableBackgroundCancel = true,
                HideCloseButton = true
            });

            if (mortgageModal?.Result == null)
            {
                _logger.LogError("Something went wrong with callback from modal");

                return;
            }

            var result = await mortgageModal.Result;

            if (result.Cancelled)
            {
                _navigationManager.NavigateTo("/");
            }
            else
            {
                await _localStorage.SaveStringAsync("documentSuffix", result?.Data?.ToString() ?? (Guid.NewGuid().ToString()));
            }
        }
    }

    private async Task saveChanges()
    {
        saveCounterMessage = "Saving...";

        await InvokeAsync(StateHasChanged);
        await Task.Delay(3000);

        await _dataService.SaveDataAsync(mortgage);

        saveCounterMessage = "Data is saved!";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(1500);
        saveCounterMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    private string GetClassName()
    {
        return string.IsNullOrWhiteSpace(saveCounterMessage) ? "" : "top";
    }
}