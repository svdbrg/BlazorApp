@page "/mortgage"

@using BlazorApp.Features.Mortgager.Components
@using BlazorApp.Features.Mortgager.Data
@using BlazorApp.Features.Shared.Services
@using BlazorApp.Features.Shared.Services.Abstractions;
@using BlazorApp.Features.Shared.Models

@inject IDataService _dataService
@inject ILogger<GcmDataService> _logger
@inject ILocalStorage _localStorage
@inject NavigationManager _navigationManager
@inject AppState _appState
@inject LoadingState _loadingState

@implements IDisposable

<PageTitle>Calculate your mortgage costs</PageTitle>

<MudText Typo="Typo.h2">Mortgage all the things</MudText>

<MudText Typo="Typo.subtitle1">This is a tool to help visualize your mortgage application and the costs that follow by owning a home.</MudText>
<MudText Typo="Typo.subtitle2">Current mortgage: <b>@mortgage.Name</b></MudText>

<div class="message @getClassName()">
    <b>@saveCounterMessage</b>
</div>

<MudGrid Style="margin-top:20px;">
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h4">Loan information</MudText>
        <MudCard Class="mb-5">
            <MudCardContent>
                <LoanInformationInput canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
            </MudCardContent>
        </MudCard>
        <MudText Typo="Typo.h4">Monthly expenses</MudText>
        <Expenses canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
    </MudItem>
    <MudItem xs="12" md="6">
        <MudText Typo="Typo.h4">Summary</MudText>
        <LoanInformationSummary onSaveChanges="saveChanges" mortgage="mortgage" />

    </MudItem>
</MudGrid>
@code {
    private MortgageItem mortgage = new();
    private bool canEdit = true;
    private string saveCounterMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadData();
        }
    }

    private async Task loadData()
    {
        _loadingState.ToggleLoading(true);

        try
        {
            mortgage = await _dataService.GetSavedDataAsync() ?? new();
            canEdit = true;
        }
        catch (System.Exception ex)
        {
            _logger.LogError("Failed to fetch data", ex);
            canEdit = false;
        }
        finally
        {
            _loadingState.ToggleLoading(false);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task saveChanges()
    {
        saveCounterMessage = "Saving...";

        await InvokeAsync(StateHasChanged);
        await Task.Delay(3000);

        await _dataService.SaveDataAsync(mortgage);

        saveCounterMessage = "Data is saved!";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(1500);
        saveCounterMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    private string getClassName()
    {
        return string.IsNullOrWhiteSpace(saveCounterMessage) ? "" : "top";
    }

    protected override void OnInitialized()
    {
        _appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        await loadData();
        await InvokeAsync(StateHasChanged);
    }
}