@page "/mortgage"

@using BlazorApp.Features.Mortgager.Components
@using BlazorApp.Features.Mortgager.Data
@using BlazorApp.Features.Mortgager.Services

@inject IDataService _dataService
@inject ILogger<GcmDataService> _logger

<PageTitle>Calculate your mortgage costs</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}

<h1>Mortgage all the things</h1>

<p>This is a tool to help visualize your mortgage application and the costs that follow owning a home.</p>
<div class="message @GetClassName()">
    <b>@saveCounterMessage</b>
</div>
<div class="mortgage">
    <div class="form-group">
        <h2>Loan information</h2>
        <LoanInformationInput canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
        <LoanInformationSummary mortgage="mortgage" />
    </div>
    <Expenses canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
</div>

@code {
    private MortgageItem mortgage = new();
    private bool isLoading = true;
    private bool canEdit = true;
    private string saveCounterMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                mortgage = await _dataService.GetSavedDataAsync() ?? new();
            }
            catch (System.Exception ex)
            {
                _logger.LogError("Failed to fetch data", ex);
                canEdit = false;
            }
            finally
            {
                isLoading = false;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task saveChanges()
    {
        saveCounterMessage = "Saving...";

        await InvokeAsync(StateHasChanged);
        await Task.Delay(3000);

        await _dataService.SaveDataAsync(mortgage);

        saveCounterMessage = "Data is saved!";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(1500);
        saveCounterMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    private string GetClassName()
    {
        return string.IsNullOrWhiteSpace(saveCounterMessage) ? "" : "top";
    }
}