@page "/mortgage"

@using BlazorApp.Features.Mortgager.Components
@using BlazorApp.Features.Mortgager.Data
@using BlazorApp.Features.Mortgager.Services.Abstractions
@using BlazorApp.Features.Mortgager.Services

@inject IDataService _dataService
@inject ILogger<GcmDataService> _logger
@inject ILocalStorage _localStorage
@inject NavigationManager _navigationManager

<PageTitle>Calculate your mortgage costs</PageTitle>

@if (isLoading)
{
    <div class="loading">Loading...</div>
}

<h1>Mortgage all the things</h1>

<p>This is a tool to help visualize your mortgage application and the costs that follow owning a home.</p>
<div class="message @GetClassName()">
    <b>@saveCounterMessage</b>
</div>
<div class="mortgage">
    <div class="form-group">
        <h2>Loan information</h2>
        <LoanInformationInput canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
        <LoanInformationSummary mortgage="mortgage" />
    </div>
    <Expenses canEdit="canEdit" mortgage="mortgage" onSaveChanges="saveChanges" />
    <div id="reset-documentsuffix">
        <label @onclick="clickChange">
            Change
        </label>
        <label @onclick="clickClear">
            Clear
        </label>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService? Modal { get; set; }
    private MortgageItem mortgage = new();
    private bool isLoading = false;
    private bool canEdit = true;
    private string saveCounterMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = false;

            await LoadData();
        }
    }

    private async void clickChange()
    {
        mortgage = new();
        await _localStorage.RemoveAsync("documentSuffix");
        await SetDocumentSuffixInLocalStorage();
        await LoadData();
    }

    private async void clickClear()
    {
        mortgage = new();
        await _localStorage.RemoveAsync("documentSuffix");
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            await SetDocumentSuffixInLocalStorage();

            mortgage = await _dataService.GetSavedDataAsync() ?? new();
        }
        catch (System.Exception ex)
        {
            _logger.LogError("Failed to fetch data", ex);
            canEdit = false;
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetDocumentSuffixInLocalStorage()
    {
        var documentSuffix = await _localStorage.GetStringAsync("documentSuffix");

        if (string.IsNullOrWhiteSpace(documentSuffix))
        {
            var mortgageModal = Modal?.Show<MortgagePicker>("Select mortgage", new ModalOptions
            {
                DisableBackgroundCancel = true,
                HideCloseButton = true
            });

            if (mortgageModal?.Result == null)
            {
                _logger.LogError("Something went wrong with callback from modal");
                
                return;
            }

            var result = await mortgageModal.Result;

            if (result.Cancelled)
            {
                _navigationManager.NavigateTo("/");
            }
            else
            {
                await _localStorage.SaveStringAsync("documentSuffix", result?.Data?.ToString() ?? (Guid.NewGuid().ToString()));
            }
        }
    }

    private async Task saveChanges()
    {
        saveCounterMessage = "Saving...";

        await InvokeAsync(StateHasChanged);
        await Task.Delay(3000);

        await _dataService.SaveDataAsync(mortgage);

        saveCounterMessage = "Data is saved!";
        await InvokeAsync(StateHasChanged);

        await Task.Delay(1500);
        saveCounterMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    private string GetClassName()
    {
        return string.IsNullOrWhiteSpace(saveCounterMessage) ? "" : "top";
    }
}