@using BlazorApp.Features.Mortgager.Services.Abstractions
@using BlazorApp.Features.Shared.Services.Abstractions
@using BlazorApp.Features.Shared.Models
@using Features.Shared.Services
@using Features.TravelPlanner.Models
@using Features.TravelPlanner.Services.Abstractions

@inject IDataService _mortgageDataService
@inject ITravelPlanner _travelPlannerService;
@inject ILocalStorage _localStorage
@inject AppState _appState
@inject IJSRuntime _js

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <table>
            <tbody>
                <tr>
                    <td colspan="2">
                        <h4>Mortgage</h4>
                    </td>
                </tr>
                <tr>
                    <td>
                        Mortgages
                    </td>
                    <td>
                        <select class="form-select" @onchange="changeSelectedValue">
                            <option value="Choose">-- Choose --</option>
                            @foreach (var item in ExistingMortgages)
                            {
                                <option value="@item" selected="@(item == SelectedMortgage)">@item</option>
                            }
                            <option value="Other">Create new</option>
                        </select>
                    </td>
                </tr>
                <tr>
                    <td></td>
                    <td>
                        @if (SelectedMortgage != "Other" && SelectedMortgage != "Choose")
                        {
                            <span @onclick="deleteMortgage" class="delete-mortgage">Delete mortgage</span>
                        }
                        @if (SelectedMortgage == "Other")
                        {
                            <input @bind="@newMortgage" type="text" class="form-control" id="mortgage-name" />
                        }
                    </td>
                </tr>
            </tbody>
        </table>
        <table>
            <tbody>
                <tr>
                    <td colspan="2">
                        <h4>Live Displayer</h4>
                    </td>
                </tr>
                <tr>
                    <td>
                        Live updates
                    </td>
                    <td class="live-switch">
                        <input type="checkbox" id="switch" checked="@(autoRefresh)" />
                        <label for="switch" @onclick="@changeAutoRefresh">
                            Toggle
                        </label>
                    </td>
                </tr>
            </tbody>
        </table>
        <div id="travel-planner-settings">
            <h4>Travel Planner</h4>
            <div id="stops">
                <div class="from">
                    <strong>From Solstigen 49</strong>
                    <ul class="list-group">
                        @foreach (var item in homeLocation.NearbyStops)
                        {
                            <li class="list-group-item @((item.MainMastExtId == tempOrigin) ? "active" : "")"
                            @onclick="@(() => setOrigin(item.MainMastExtId))">@item.Name</li>
                        }
                    </ul>
                </div>

                <div class="to">
                    @foreach (var item in nearbyStopLocations)
                    {
                        <strong>@item.Name</strong>
                        <ul class="list-group">
                            @foreach (var stop in item.NearbyStops)
                            {
                                <li class="list-group-item @((stop.MainMastExtId == tempDestination) ? "active" : "")"
                            @onclick="@(() => setDestination(stop.MainMastExtId))">@stop.Name</li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>

        <div id="error-message">@errorMessage</div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();

    private async void Submit() {
        await saveChanges();
        MudDialog.Close(DialogResult.Ok(true));
    }
    
    void Cancel() => MudDialog.Cancel();

    private string SelectedMortgage { get; set; } = string.Empty;
    private string newMortgage { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;
    List<string> ExistingMortgages { get; set; } = new();

    private bool autoRefresh { get; set; }

    private List<NearbyStopLocation> nearbyStopLocations = new List<NearbyStopLocation>();
    private NearbyStopLocation homeLocation = new();
    private string tempOrigin { get; set; } = string.Empty;
    private string tempDestination { get; set; } = string.Empty;

    protected override async void OnInitialized()
    {
        await loadMortgageData();
        await loadTravelPlannerData();
        StateHasChanged();
    }

    private async Task loadMortgageData()
    {
        var encryptedMortgage = await _localStorage.GetStringAsync("documentSuffix");

        ExistingMortgages = await _mortgageDataService.GetAllMortgageDocuments();
        SelectedMortgage = string.IsNullOrWhiteSpace(encryptedMortgage) ? "" : HelperMethods.DecryptString(encryptedMortgage,
        "documentSuffix45");
        autoRefresh = _appState.AutoRefresh;
    }

    private async Task loadTravelPlannerData()
    {
        tempDestination = _appState.DestinationStation;
        tempOrigin = _appState.HomeStation;

        foreach (var item in Places.PlacesOfInterest)
        {
            nearbyStopLocations.Add(new NearbyStopLocation
            {
                Name = item.Name,
                NearbyStops = await _travelPlannerService.GetNearbyStops(item.Longitude, item.Latitude).ToListAsync()
            });
        }

        nearbyStopLocations.Add(new NearbyStopLocation
        {
            Name = "Other",
            NearbyStops = new List<NearbyStop> { new() { Name = "Slussen", MainMastExtId = "300109192" } }
        });

        homeLocation = new NearbyStopLocation
        {
            Name = Places.Home.Name,
            NearbyStops = await _travelPlannerService.GetNearbyStops(Places.Home.Longitude, Places.Home.Latitude).ToListAsync()
        };
    }

    private void setOrigin(string newOrigin)
    {
        tempOrigin = newOrigin;
    }

    private void setDestination(string newDestination)
    {
        tempDestination = newDestination;
    }

    private async Task saveChanges()
    {
        await saveMortgageSettings();
        saveLiveDisplayerSettings();
        saveTravelPlannerSettings();
    }

    private void saveLiveDisplayerSettings()
    {
        if (_appState.AutoRefresh != autoRefresh)
        {
            _appState.ToggleAutoRefresh();
        }
    }

    private async Task saveMortgageSettings()
    {
        if (!canSelect())
        {
            errorMessage = "Please select a valid mortgage in the list";
        }
        else
        {
            if (SelectedMortgage == "Other")
            {
                SelectedMortgage = newMortgage;
            }

            var encryptedMortgage = HelperMethods.EncryptString(SelectedMortgage, "documentSuffix45");
            await _localStorage.SaveStringAsync("documentSuffix", encryptedMortgage ?? (Guid.NewGuid().ToString()));

            await InvokeAsync(StateHasChanged);
            _appState.ChangeMortageSetting();
        }
    }

    private void saveTravelPlannerSettings()
    {
        _appState.SetDestination(tempDestination);
        _appState.SetHomeStation(tempOrigin);
    }

    private void changeAutoRefresh()
    {
        autoRefresh = !autoRefresh;
    }

    private bool canSelect()
    {
        if ((SelectedMortgage == "Other" && string.IsNullOrEmpty(newMortgage))
        || SelectedMortgage == "Choose"
        || string.IsNullOrWhiteSpace(SelectedMortgage))
        {
            return false;
        }

        return true;
    }

    private async Task deleteMortgage()
    {
        if (!await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the mortgage '{SelectedMortgage}'?"))
        {
            return;
        }

        await _mortgageDataService.DeleteMortgageAsync(SelectedMortgage);
        await loadMortgageData();
    }

    private void changeSelectedValue(ChangeEventArgs e)
    {
        errorMessage = string.Empty;
        SelectedMortgage = e?.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }
}