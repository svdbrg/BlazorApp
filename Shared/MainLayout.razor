@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.Shared.Services.Abstractions

@inherits LayoutComponentBase
@inject NavigationManager _navigationManager
@inject ILocalStorage _localStorage
@inject AppState _appState
@inject LoadingState _loadingState
@inject IDialogService DialogService

<PageTitle>BlazorApp</PageTitle>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudOverlay Visible="_loadingState.IsLoading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
<MudLayout>
    <MudDrawer @bind-Open="@open" Anchor="Anchor.Bottom" Width="100%" Height="350px" Elevation="1"
        Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">My App</MudText>
        </MudDrawerHeader>
        <NavMenu />

    </MudDrawer>
    <MudAppBar Color="Color.Primary" Bottom="true" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@(() => ToggleDrawer())" Color="Color.Inherit"
            Edge="Edge.Start" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Link="http://github.com/svdbrg" Target="_blank"
            Color="Color.Inherit" />
    </MudAppBar>
    <MudMainContent Class="pt-4 pb-16">
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool open = false;

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += LocationChanged;
        _appState.OnChange += OnAppStateChange;
        _loadingState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
        _loadingState.OnChange -= OnAppStateChange;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IsAuthenticated();
        }
    }

    void ToggleDrawer()
    {
        open = !open;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await IsAuthenticated();
    }

    private async Task IsAuthenticated()
    {
        var authenticationToken = await _localStorage.GetStringAsync("auth");

        if (string.IsNullOrWhiteSpace(authenticationToken))
        {
            if (!_navigationManager.ToBaseRelativePath(_navigationManager.Uri).Equals(""))
            {
                _navigationManager.NavigateTo("/", true);
            }
            else
            {
                DialogService.Show<LoginModal>("Log in", new DialogOptions
                {
                    CloseButton = false,
                    CloseOnEscapeKey = false,
                    DisableBackdropClick = true
                });
            }
        }
    }

    private async void OnAppStateChange()
    {
        await InvokeAsync(StateHasChanged);
    }
}
