@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.Shared.Services.Abstractions;

@inherits LayoutComponentBase
@inject NavigationManager _navigationManager
@inject ILocalStorage _localStorage;

<PageTitle>BlazorApp</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += LocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await IsAuthenticated();
        }
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await IsAuthenticated();
    }

    private async Task IsAuthenticated()
    {
        var authenticationToken = await _localStorage.GetStringAsync("auth");

        if (string.IsNullOrWhiteSpace(authenticationToken))
        {
            if (!_navigationManager.ToBaseRelativePath(_navigationManager.Uri).Equals(""))
            {
                _navigationManager.NavigateTo("/", true);
            }
            else
            {
                Modal?.Show<LoginModal>("Login", new ModalOptions
                {
                    DisableBackgroundCancel = true,
                    HideCloseButton = true
                });
            }
        }
    }

    [CascadingParameter] public IModalService? Modal { get; set; }
}
