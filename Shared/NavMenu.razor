@using Microsoft.Extensions.Options;
@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.Shared.Services.Abstractions

@inject IOptions<List<FeatureInformation>> _options;
@inject ILocalStorage _localStorage
@inject NavigationManager _navigationManager
@inject IDialogService DialogService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">

    <MudNavMenu Bordered="true">
        <MudNavLink Href="">Home</MudNavLink>
        @foreach (var item in _options.Value.Select(v => v.NavMenuItem))
        {
            <MudNavLink Href="@item.Href">@item.Label</MudNavLink>
        }
        <MudNavLink @onclick="logOut">Log out</MudNavLink>
        <MudNavLink @onclick="openSettings">Settings</MudNavLink>
    </MudNavMenu>

</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async void logOut()
    {
        await _localStorage.RemoveAsync("auth");
        _navigationManager.NavigateTo("/", true);
    }

    private void openSettings()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullScreen = true
        };

        DialogService.Show<SettingsModal>("Settings", options);
    }
}