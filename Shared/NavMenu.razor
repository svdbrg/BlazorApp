@using Microsoft.Extensions.Options;
@using BlazorApp.Features.Shared;
@using BlazorApp.Models

@inject IOptions<List<FeatureInformation>> _options;
@inject AppState appState

@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp</a>
        @if (appState.ShouldDisplayToggler) { 
            <input type="checkbox" id="switch" checked="@(appState.AutoRefresh)" />
            <label for="switch" @onclick="appState.ToggleAutoRefresh">
                Toggle
            </label>
        }
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @foreach (var item in _options.Value.Select(v => v.NavMenuItem))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@item.Href">
                    <span class="@item.Icon" aria-hidden="true"></span> @item.Label
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        appState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        appState.OnChange -= StateHasChanged;
    }
}