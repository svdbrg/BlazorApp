@using Microsoft.Extensions.Options;
@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.Shared.Services.Abstractions

@inject IOptions<List<FeatureInformation>> _options;
@inject ILocalStorage _localStorage
@inject NavigationManager _navigationManager
@inject IDialogService DialogService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        @foreach (var item in _options.Value.Select(v => v.NavMenuItem))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@item.Href">
                    <span class="@item.Icon" aria-hidden="true"></span> @item.Label
                </NavLink>
            </div>
        }
        <div class="nav-item px-3 settings">
            <a @onclick="openSettings" class="nav-link"><span class="oi oi-cog" aria-hidden="true"></span> Settings
            </a>
        </div>
        <div class="nav-item px-3 logout">
            <a @onclick="logOut" class="nav-link"><span class="oi oi-account-logout" aria-hidden="true"></span> Logout
            </a>
        </div>
    </nav>

</div>

@code {
    @* [CascadingParameter] public IModalService? Modal { get; set; } *@
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async void logOut()
    {
        await _localStorage.RemoveAsync("auth");
        _navigationManager.NavigateTo("/", true);
    }

    private void openSettings()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            FullScreen = true
        };
        DialogService.Show<SettingsModal>("Settings", options);

        @* var settingsModal = Modal?.Show<SettingsModal>("Settings", new ModalOptions
            {
            HideCloseButton = true,
            HideHeader = true
            }); *@
    }
}