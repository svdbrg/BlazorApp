@using Features.Shared.Models
@using BlazorApp.Features.Shared.Services.Abstractions

@inject IJSRuntime js
@inject IAuthenticationDataService _authService


<MudText Typo="Typo.h6">Accounts</MudText>
<MudSimpleTable Style="min-width:500px;">
    <thead>
        <tr>
            <th>Name</th>
            <th style="text-align: center;">Is admin</th>
            <th style="text-align: center;">Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in users)
        {
            <tr>
                <td>@account.Name</td>
                <td style="text-align: center; max-width: 100px;">
                    <MudSwitch Style="margin-right:0;" @bind-Checked="@account.IsAdmin" Color="Color.Success" />
                </td>
                <td style="text-align: center; max-width: 100px;">
                    <a @onclick="@(e => removeUser(account))">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                        class="bi bi-trash" viewBox="0 0 16 16">
                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0
            0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z">
                            </path>
                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1
            1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882
            4H4.118zM2.5 3V2h11v1h-11z">
                            </path>
                        </svg>
                    </a>
                </td>

            </tr>
        }
    </tbody>
</MudSimpleTable>
<MudPaper Class="mt-10 pa-5">
    <MudText Typo="Typo.h6">New user</MudText>

    <MudGrid>
        <MudItem xs="12" sm="6" md="6">
            <MudTextField T="string" HelperText="Name of the new user" Label="Name" @bind-Value="newUser.Name" />
        </MudItem>

        <MudItem xs="12" sm="6" md="6">
            <MudTextField T="string" HelperText="New password" InputType="@PasswordInput" Label="Password"
                @bind-Value="tempPassword" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                OnAdornmentClick="TogglePasswordVisibility" />

        </MudItem>
    </MudGrid>
    <div class="d-flex align-center justify-space-between mt-6">
        <MudCheckBox @bind-Checked="@newUser.IsAdmin" Label="Is admin" Color="Color.Secondary">
        </MudCheckBox>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="saveNewUser">
            Save
        </MudButton>
    </div>
</MudPaper>

@code {
    private List<Authentication> users { get; set; } = new();
    private Authentication newUser { get; set; } = new();
    private string tempPassword { get; set; } = string.Empty;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async void OnInitialized()
    {
        await loadAccounts();
        await InvokeAsync(StateHasChanged);
    }

    private async Task loadAccounts()
    {
        users = await _authService.GetAllAccounts();
    }

    private async Task removeUser(Authentication user)
    {
        if (!await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{user.Name}'?"))
        {
            return;
        }

        await _authService.DeleteUser(user);

        await loadAccounts();
        await InvokeAsync(StateHasChanged);
    }

    private async Task saveNewUser()
    {
        await _authService.SaveNewUser(newUser, tempPassword);

        newUser = new();
        tempPassword = string.Empty;

        await loadAccounts();
        await InvokeAsync(StateHasChanged);
    }

    private void TogglePasswordVisibility()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}