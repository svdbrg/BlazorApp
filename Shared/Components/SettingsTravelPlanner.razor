@using Features.TravelPlanner.Models
@using Features.TravelPlanner.Services.Abstractions
@using BlazorApp.Features.Shared.Models

@inject ITravelPlannerService _travelPlannerService
@inject AppState _appState


<MudText Typo="Typo.h6">Travel Planner</MudText>
<MudSelect T="NearbyStop" Label="From" @bind-Value="tempOrigin" Variant="Variant.Outlined"
    AnchorOrigin="Origin.BottomCenter">
    @foreach (var item in nearbyStopLocations)
    {
        <MudSelectItem Value="@(new NearbyStop() {Name = @item.Name})" Disabled="true" />
        @foreach (var stop in item.NearbyStops)
        {
            <MudSelectItem Value="@stop" />
        }
    }
</MudSelect>

<MudSelect T="NearbyStop" Label="To" @bind-Value="tempDestination" Variant="Variant.Outlined"
    AnchorOrigin="Origin.BottomCenter">
    @foreach (var item in nearbyStopLocations)
    {
        <MudSelectItem Value="@(new NearbyStop() {Name = @item.Name})" Disabled="true" />
        @foreach (var stop in item.NearbyStops)
        {
            <MudSelectItem Value="@stop" T="NearbyStop" />
        }
    }
</MudSelect>

@code {
    private List<NearbyStopLocation> nearbyStopLocations = new List<NearbyStopLocation>();
    private NearbyStop tempOrigin { get; set; } = new();
    private NearbyStop tempDestination { get; set; } = new();

    protected override async void OnInitialized()
    {
        await loadTravelPlannerData();

        StateHasChanged();
    }

    private async Task loadTravelPlannerData()
    {
        tempDestination = _appState.DestinationStation;
        tempOrigin = _appState.HomeStation;

        nearbyStopLocations = await _travelPlannerService.GetAllNearbyStops().ToListAsync();
    }

    public void saveTravelPlannerSettings()
    {
        _appState.SetDestination(tempDestination);
        _appState.SetHomeStation(tempOrigin);
    }
}