@using BlazorApp.Features.Mortgager.Services.Abstractions
@using BlazorApp.Features.Shared.Services.Abstractions
@using Features.Shared.Services
@using BlazorApp.Features.Shared.Models

@inject IMortgageDataService _mortgageDataService
@inject ILocalStorage _localStorage
@inject AppState _appState
@inject IJSRuntime _js

<table>
    <tbody>
        <tr>
            <td colspan="2">
                <MudText Typo="Typo.h6">Mortgage</MudText>
            </td>
        </tr>
        <tr>
            <td>
                <MudSelect T="string" Label="Mortgage" @bind-Value="SelectedMortgage" Variant="Variant.Outlined"
                    AnchorOrigin="Origin.BottomCenter">
                    @foreach (var item in ExistingMortgages)
                    {
                        <MudSelectItem T="string" value="@item" />
                    }
                    <MudSelectItem T="string" Value="@("Other")" />
                </MudSelect>
            </td>
        </tr>
        <tr>
            <td>
                @if (SelectedMortgage != "Other" && SelectedMortgage != "Choose")
                {
                    <MudButton Variant="Variant.Text" OnClick="deleteMortgage" Color="Color.Secondary">Delete
                        mortgage</MudButton>
                }
                @if (SelectedMortgage == "Other")
                {
                    <MudTextField @bind-Value="newMortgage" Label="New mortgage" Variant="Variant.Text">
                    </MudTextField>
                }
            </td>
        </tr>
    </tbody>
</table>


@code {
    private string SelectedMortgage { get; set; } = string.Empty;
    private string newMortgage { get; set; } = string.Empty;
    private string errorMessage { get; set; } = string.Empty;
    List<string> ExistingMortgages { get; set; } = new();

    protected override async void OnInitialized()
    {
        await loadMortgageData();

        StateHasChanged();
    }

    private async Task loadMortgageData()
    {
        var encryptedMortgage = await _localStorage.GetStringAsync("documentSuffix");

        ExistingMortgages = await _mortgageDataService.GetAllMortgageDocuments();
        SelectedMortgage = string.IsNullOrWhiteSpace(encryptedMortgage) ? "" : Encryption.DecryptString(encryptedMortgage,
        Encryption.DocumentSuffixEncryptionKey);
    }

    public async Task saveMortgageSettings()
    {
        if (!canSelect())
        {
            errorMessage = "Please select a valid mortgage in the list";
        }
        else
        {
            if (SelectedMortgage == "Other")
            {
                SelectedMortgage = newMortgage;
            }

            var encryptedMortgage = Encryption.EncryptString(SelectedMortgage, Encryption.DocumentSuffixEncryptionKey);
            await _localStorage.SaveStringAsync("documentSuffix", encryptedMortgage ?? (Guid.NewGuid().ToString()));

            await InvokeAsync(StateHasChanged);
            _appState.ChangeMortageSetting();
        }
    }

    private async Task deleteMortgage()
    {
        if (!await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the mortgage '{SelectedMortgage}'?"))
        {
            return;
        }

        await _mortgageDataService.DeleteMortgageAsync(SelectedMortgage);
        await loadMortgageData();
    }

    private void changeSelectedValue(ChangeEventArgs e)
    {
        errorMessage = string.Empty;
        SelectedMortgage = e?.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    private bool canSelect()
    {
        if ((SelectedMortgage == "Other" && string.IsNullOrEmpty(newMortgage))
        || SelectedMortgage == "Choose"
        || string.IsNullOrWhiteSpace(SelectedMortgage))
        {
            return false;
        }

        return true;
    }
}