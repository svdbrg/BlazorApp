@using BlazorApp.Features.Shared.Services.Abstractions
@using Features.Shared.Services

@inject ILocalStorage _localStorage
@inject IDataService _gcmDataService

<MudContainer MaxWidth="MaxWidth.Small">
    <MudTextField @bind-Value="Password" Label="Password" Variant="Variant.Text" InputType="@PasswordInput"
        Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
    <MudContainer Style="margin-top: 30px; text-align:center;">
        <MudFab Size="Size.Small" StartIcon="@Icons.Filled.Login" Color="Color.Primary" OnClick="Login" Label="Enter" />
        <div id="error-message">@errorMessage</div>
    </MudContainer>
</MudContainer>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();

    private string errorMessage { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private bool isShow;
    private InputType PasswordInput = InputType.Password;
    private string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async void Login()
    {
        var auth = await _gcmDataService.Authenticate(Password);
        
        if (auth.IsAuthenticated)
        {
            errorMessage = "";
            var token = Encryption.EncryptString($"{Password}-{auth.IsAdmin}-{auth.Name}-{Encryption.Salt}", Encryption.AuthorizationEncryptionKey);
            await _localStorage.SaveStringAsync("auth", token);

            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            errorMessage = "Wrong password";

            await InvokeAsync(StateHasChanged);
        }
    }
}