@using Data
@using Services.Abstractions

@inject IFootballDataService _dataService

<MudDialog DisableSidePadding="true" Class="settings-modal pa-0">
    <DialogContent>
        <MudText Typo="Typo.h4" Align="Align.Center" Class="pb-5">@TeamName</MudText>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-4">
            <MudTabPanel Text="Upcoming fixtures">
                <PastOrUpcomingResults Fixtures="UpcomingFixtures" TeamName="@TeamName" />
            </MudTabPanel>
            <MudTabPanel Text="Results">
                <PastOrUpcomingResults Fixtures="PastResults" ShowPastResults="true" TeamName="@TeamName" />
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public int TeamId { get; set; }
    [Parameter] public string TeamName { get; set; } = string.Empty;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new();

    private IEnumerable<Fixture> UpcomingFixtures { get; set; } = new List<Fixture>();
    private IEnumerable<Fixture> PastResults { get; set; } = new List<Fixture>();

    void Cancel() => MudDialog.Cancel();

    protected override async void OnInitialized()
    {
        var allFixtures = await _dataService.GetFixturesForTeamAsync(TeamId);

        UpcomingFixtures = allFixtures
            .Where(f => f.Status == "L" || f.Status == "U" && f.DateAndTime > DateTime.MinValue)
            .OrderBy(f => f.DateAndTime);

        PastResults = allFixtures
            .Where(f => f.Status == "C" && f.DateAndTime < DateTime.Now)
            .OrderByDescending(f => f.DateAndTime);

        StateHasChanged();
    }
}