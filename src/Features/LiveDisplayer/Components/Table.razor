@using Data
@using Services
@using BlazorApp.Features.Shared.Models

@inject IJSRuntime _js
@inject AppState _appState
@inject IDialogService DialogService

<div class="table-wrapper">
    <MudSimpleTable Dense="true" Style="overflow-x: auto;">
        <thead>
            <tr>
                <th>P</th>
                <th>Team</th>
                <th>PL</th>
                <th>G</th>
                <th>P</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in footballTable)
            {
                <tr 
                    class="@team.CssClass @HelperMethods.GetCssClassForCurrentStatus(team.Status)"
                    @onmouseover="@(() => setCurrentlyPlayingDelegate!(team.ShortName))"
                    @onmouseout="@(() => removeCurrentlyPlayingDelegate!(team.ShortName))" id="@team.ShortName"
                    @onclick="(() => ShowUpcomingFixturesForTeam(team.Id, team.Name))">
                    <td>
                        <span class="dot"></span>
                        @team.Position
                    </td>
                    <td>
                        <div>
                            <img height="25" width="25" class="team-crest" src="@GetCrest(team.AltId)" />
                            @team.Name
                        </div>
                    </td>
                    <td>@team.Played</td>
                    <td>@team.GoalDifference</td>
                    <td>@team.Points</td>
                </tr>
            }
        </tbody>
    </MudSimpleTable>
</div>

@code {
    [Parameter] public IEnumerable<Team> footballTable { get; set; } = new List<Team>();
    [Parameter] public Action<string>? setCurrentlyPlayingDelegate { get; set; }

    [Parameter] public Action<string>? removeCurrentlyPlayingDelegate { get; set; }

    public async void setCurrentlyPlaying(string home, string away)
    {
        await _js.InvokeVoidAsync($"PlTable.setClass", home, away);
    }

    public async void removeCurrentlyPlaying(string home, string away)
    {
        await _js.InvokeVoidAsync($"PlTable.removeClass", home, away);
    }

    private string GetCrest(string altId)
    {
        return $"https://resources.premierleague.com/premierleague/badges/25/{altId}.png";
    }

    private void ShowUpcomingFixturesForTeam(int teamId, string teamName)
    {
        var parameters = new DialogParameters();
        parameters.Add("TeamId", teamId);
        parameters.Add("TeamName", teamName);

        DialogService.Show<FixturesModal>("Upcoming fixtures", parameters, new DialogOptions
        {
            CloseButton = false,
            FullWidth = true,
            NoHeader = true,
            CloseOnEscapeKey = true
        });
    }

    protected override void OnInitialized()
    {
        _appState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
    }

    private async void OnAppStateChange()
    {
        await InvokeAsync(StateHasChanged);
    }
}