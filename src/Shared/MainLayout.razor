@using BlazorApp.Features.Shared.Models
@using BlazorApp.Features.Shared.Services.Abstractions

@inherits LayoutComponentBase

@inject NavigationManager _navigationManager
@inject ILocalStorage _localStorage
@inject AppState _appState
@inject LoadingState _loadingState
@inject IDialogService _dialogService
@inject ILogger<MainLayout> _logger

<PageTitle>BlazorApp</PageTitle>

<MudThemeProvider IsDarkMode="isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudOverlay Visible="_loadingState.IsLoading" DarkBackground="true" Absolute="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
<MudLayout>
    <MudDrawer @bind-Open="@open" Elevation="1" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Oscar's playground</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudAppBar Color="Color.Primary" Fixed="true">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" OnClick="@(() => ToggleDrawer())" Color="Color.Inherit"
            Edge="Edge.Start" />
        <MudSpacer />
        <MudCheckBox onclick="@(() => ToggleDarkMode())" @bind-Checked="@isDarkMode" Color="Color.Inherit"
            CheckedIcon="@Icons.Outlined.LightMode" UncheckedIcon="@Icons.Outlined.DarkMode" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Link="http://github.com/svdbrg" Target="_blank"
            Color="Color.Inherit" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool open = true;
    private bool isDarkMode { get; set; }

    protected override void OnInitialized()
    {
        _navigationManager.LocationChanged += LocationChanged;
        _appState.OnChange += OnAppStateChange;
        _loadingState.OnChange += OnAppStateChange;
    }

    public void Dispose()
    {
        _appState.OnChange -= OnAppStateChange;
        _loadingState.OnChange -= OnAppStateChange;
    }

    async void ToggleDarkMode()
    {
        isDarkMode = !_appState.IsDarkMode;
        _appState.SetDarkMode(isDarkMode);
        await _localStorage.SaveStringAsync("IsDarkMode", isDarkMode.ToString());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _loadingState.ToggleLoading(true);
            if (bool.TryParse(await _localStorage.GetStringAsync("IsDarkMode"), out var darkmode))
            {
                isDarkMode = darkmode;
                _appState.SetDarkMode(isDarkMode);
            }
            else
            {
                isDarkMode = _appState.IsDarkMode;
            }

            await InvokeAsync(StateHasChanged);

            await IsAuthenticated();
            _loadingState.ToggleLoading(false);
        }
    }

    void ToggleDrawer()
    {
        open = !open;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await IsAuthenticated();
    }

    private async Task IsAuthenticated()
    {
        try
        {
            var authenticationToken = await _localStorage.GetStringAsync("auth");

            if (string.IsNullOrWhiteSpace(authenticationToken))
            {
                if (!_navigationManager.ToBaseRelativePath(_navigationManager.Uri).Equals(""))
                {
                    _navigationManager.NavigateTo("/", true);
                }
                else
                {
                    _dialogService.Show<LoginModal>("Log in", new DialogOptions
                    {
                        CloseButton = false,
                        CloseOnEscapeKey = false,
                        DisableBackdropClick = true
                    });
                }
            }
        }
        catch (System.Exception)
        {
            _logger.LogInformation("Unable to read authentication, removing key.");
            await _localStorage.RemoveAsync("auth");
            await _localStorage.RemoveAsync("documentSuffix");

            _navigationManager.NavigateTo("/", true);
        }
    }

    private async void OnAppStateChange()
    {
        await InvokeAsync(StateHasChanged);
    }
}